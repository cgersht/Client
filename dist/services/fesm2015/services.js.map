{"version":3,"file":"services.js","sources":["ng://services/lib/services.service.ts","ng://services/lib/services.component.ts","ng://services/lib/services.module.ts","ng://services/lib/api/get-options.service.ts","ng://services/lib/api/configuration.service.ts","ng://services/lib/api/http-service.base.ts","ng://services/lib/api/get-customers.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServicesService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-services',\n  template: `\n    <p>\n      services works!\n    </p>\n  `,\n  styles: []\n})\nexport class ServicesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ServicesComponent } from './services.component';\n\n\n\n@NgModule({\n  declarations: [ServicesComponent],\n  imports: [\n  ],\n  exports: [ServicesComponent]\n})\nexport class ServicesModule { }\n","\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({  providedIn: 'root'})\nexport class GetOptionsService {\n options:  any[] ;\n  constructor(private http: HttpClient) {  }\n//\n  initService(path: string,imagesPath: string): Promise<any> {\n    console.log(`============${path}`);\n    return this.http.get<any[] >(path).pipe(\n      map(result => result.map(item => ({ ...item, imgSource: `${imagesPath}/${ item['img']}.png`}))),\n      tap(result => this.options = result),\n      tap(result => console.log(`**************${result}`)),\n     ).toPromise();\n  }\n  getOptions() {\n  //  console.log(`-----------------${this.options}`);\n      return this.options;\n  }\n\n  getOptionByImage(img) {\n    if (!this.options) {  return ''; }\n    return (this.options.find(item => item.img === img) || {imgSource: 'notFound'}).imgSource;\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { Setting, IpConfig } from 'types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationService {\r\n  ips: IpConfig;\r\n  settingConfig: Setting;\r\n\r\n  constructor(\r\n    private http: HttpClient) {\r\n  }\r\n \r\n  initConfiguration(path): Promise<any> {\r\n    return combineLatest(\r\n      this.http.get<IpConfig>(`${path}/ipConfig.json`),\r\n      this.http.get<Setting>(`${path}/settingsConfig.json`)\r\n    ).pipe(\r\n      tap(response => [this.ips, this.settingConfig] = response),\r\n    ).toPromise();\r\n  }\r\n}\r\n","import { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpRequestModel } from 'types';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@Injectable()\r\nexport abstract class HttpServiceBase {\r\n\r\n\r\n  index = 0;\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: ConfigurationService,\r\n  ) { }\r\n\r\n  get$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._get$(httpRequest); }\r\n\r\n    return this.http.get<T>(httpRequest.fullUrl, { params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  delete$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.delete<T>(httpRequest.fullUrl, { params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  post$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._post$(httpRequest); }\r\n    return this.http.post<T>(httpRequest.fullUrl, httpRequest.body,\r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  request$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'GET',\r\n      httpRequest.fullUrl,\r\n      {\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  requestPost$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'POST',\r\n      httpRequest.fullUrl,\r\n      {\r\n\r\n        body: { ...httpRequest.body },\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  private _get$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.get(httpRequest.fullUrl, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n  private _post$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.post(httpRequest.fullUrl, httpRequest.body, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpRequestModel, Customer } from 'types';\nimport { HttpServiceBase } from './http-service.base';\n\n@Injectable({  providedIn: 'root'})\nexport class GetCustomersService extends HttpServiceBase {\n  private get _serverUrl(): string {\n    return `${this.config.ips.servicePath}customers/`;\n  }\n\n  getCustomersList$(): Observable<Customer[]> {\n   return this.get$(new HttpRequestModel({\n      url: this._serverUrl,\n      action: 'getCustomers',\n    }));\n  //return this.http.get<Customers>('http://localhost:3030/customers/getCustomers');\n  }\n\n}\n"],"names":[],"mappings":"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"}
{"version":3,"file":"services.js","sources":["ng://services/lib/services.service.ts","ng://services/lib/services.component.ts","ng://services/lib/services.module.ts","ng://services/lib/api/get-options.service.ts","ng://services/lib/api/configuration.service.ts","ng://services/lib/api/http-service.base.ts","ng://services/lib/api/get-customers.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServicesService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-services',\n  template: `\n    <p>\n      services works!\n    </p>\n  `,\n  styles: []\n})\nexport class ServicesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ServicesComponent } from './services.component';\n\n\n\n@NgModule({\n  declarations: [ServicesComponent],\n  imports: [\n  ],\n  exports: [ServicesComponent]\n})\nexport class ServicesModule { }\n","\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable({  providedIn: 'root'})\nexport class GetOptionsService {\n options:  any[] ;\n  constructor(private http: HttpClient) {  }\n//\n  initService(path: string,imagesPath: string): Promise<any> {\n        return this.http.get<any[] >(path).pipe(\n      map(result => result.map(item => ({ ...item, imgSource: `${imagesPath}/${ item['img']}.png`}))),\n      tap(result => this.options = result),\n     ).toPromise();\n  }\n  getOptions() {\n  //  console.log(`-----------------${this.options}`);\n      return this.options;\n  }\n\n  getOptionByImage(img) {\n    if (!this.options) {  return ''; }\n    return (this.options.find(item => item.img === img) || {imgSource: 'notFound'}).imgSource;\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { Setting, IpConfig } from 'types';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ConfigurationService {\r\n  ips: IpConfig;\r\n  settingConfig: Setting;\r\n\r\n  constructor(\r\n    private http: HttpClient) {\r\n  }\r\n \r\n  initConfiguration(path): Promise<any> {\r\n    return combineLatest(\r\n      this.http.get<IpConfig>(`${path}/ipConfig.json`),\r\n      this.http.get<Setting>(`${path}/settingsConfig.json`)\r\n    ).pipe(\r\n      tap(response => [this.ips, this.settingConfig] = response),\r\n    ).toPromise();\r\n  }\r\n}\r\n","import { HttpClient, HttpEvent, HttpEventType, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Injectable, Optional } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpRequestModel } from 'types';\r\nimport { ConfigurationService } from './configuration.service';\r\n\r\n@Injectable()\r\nexport abstract class HttpServiceBase {\r\n\r\n\r\n  index = 0;\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected config: ConfigurationService,\r\n  ) { }\r\n\r\n  get$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._get$(httpRequest); }\r\n\r\n    return this.http.get<T>(httpRequest.fullUrl, { params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  delete$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    return this.http.delete<T>(httpRequest.fullUrl, { params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  post$<T = string>(httpRequest: HttpRequestModel): Observable<T> {\r\n\r\n    if (httpRequest.isText) { return this._post$(httpRequest); }\r\n    return this.http.post<T>(httpRequest.fullUrl, httpRequest.body,\r\n      { headers: httpRequest.headers, params: { ...httpRequest.fullParams } });\r\n  }\r\n\r\n  request$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'GET',\r\n      httpRequest.fullUrl,\r\n      {\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  requestPost$(httpRequest: HttpRequestModel): Observable<HttpResponse<any>> {\r\n    return this.http.request(\r\n      'POST',\r\n      httpRequest.fullUrl,\r\n      {\r\n\r\n        body: { ...httpRequest.body },\r\n        params: { ...httpRequest.fullParams },\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n\r\n      });\r\n  }\r\n\r\n  private _get$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.get(httpRequest.fullUrl, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n  private _post$(httpRequest: HttpRequestModel): Observable<any> {\r\n    return this.http.post(httpRequest.fullUrl, httpRequest.body, { params: { ...httpRequest.fullParams }, responseType: 'text' });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpRequestModel, Customer } from 'types';\nimport { HttpServiceBase } from './http-service.base';\n\n@Injectable({  providedIn: 'root'})\nexport class GetCustomersService extends HttpServiceBase {\n  private get _serverUrl(): string {\n    return `${this.config.ips.servicePath}customers/`;\n  }\n\n  getCustomersList$(): Observable<Customer[]> {\n   return this.get$(new HttpRequestModel({\n      url: this._serverUrl,\n      action: 'getCustomers',\n    }));\n  //return this.http.get<Customers>('http://localhost:3030/customers/getCustomers');\n  }\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
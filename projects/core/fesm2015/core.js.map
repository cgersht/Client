{"version":3,"file":"core.js","sources":["ng://core/lib/core.service.ts","ng://core/lib/core.component.ts","ng://core/lib/core.module.ts","ng://core/lib/pipes/is-date.pipe.ts","ng://core/lib/functions/string-is-number.ts","ng://core/lib/pipes/ph-number.pipe.ts","ng://core/lib/pipes/timespan.pipe.ts","ng://core/lib/pipes/is-array.pipe.ts","ng://core/lib/pipes/time-span.pipe.ts","ng://core/lib/functions/enum-value-to-string.ts","ng://core/lib/pipes/enum-to-string.pipe.ts","ng://core/lib/pipes/enum-label-value-list.pipe.ts","ng://core/lib/pipes/is-text.pipe.ts","ng://core/lib/pipes/is-object.pipe.ts","ng://core/lib/functions/string-is-date.ts","ng://core/lib/pipes/my-date.pipe.ts","ng://core/lib/pipes/my-date-time.pipe.ts","ng://core/lib/pipes/time.pipe.ts","ng://core/lib/pipes/pipes.module.ts","ng://core/lib/token/interceptors/web-api-http.interceptor.ts","ng://core/lib/token/environment-token.ts","ng://core/lib/functions/enum-to-select-items.ts","ng://core/lib/functions/file-name-from-full-path.ts","ng://core/lib/functions/format-num-as-metric-prefix.ts","ng://core/lib/functions/json-is-empty.ts","ng://core/lib/functions/sort-date-time.ts","ng://core/lib/functions/string-is-json.ts","ng://core/lib/functions/to-pascal-case-record.ts","ng://core/lib/functions/try-parse-json.ts","ng://core/public_api.ts","ng://core/core.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoreService {\n\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-core',\n  template: `\n    <p>\n      core works!\n    </p>\n  `,\n  styles: []\n})\nexport class CoreComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CoreComponent } from './core.component';\n\n@NgModule({\n  declarations: [CoreComponent],\n  imports: [],\n  exports: [CoreComponent]\n})\nexport class CoreModule { }\n","import { Pipe, PipeTransform, ModuleWithComponentFactories } from '@angular/core';\nimport { dateTimeFormats, dateFormats, timeFormats } from 'types';\nimport mom from 'moment';\nconst moment = mom;\n\n@Pipe({ name: 'isDate' })\nexport class IsDatePipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n\n    // if (!isNaN(+value)) { return null; }\n    const dateTimePatterns: dateTimeFormats[] = Object.entries(dateTimeFormats).map(([key, val]) => val) || [];\n    const datePatterns = Object.entries(dateFormats).map(([key, val]) => val) || [];\n    const timePatterns = Object.entries(timeFormats).map(([key, val]) => val) || [];\n\n    // const patterns = [...dateTimePatterns, ...datePatterns, ...timePatterns, moment.ISO_8601];\n\n    // for (const pattern of patterns) {\n    //   const m = value && /UTC/i.test(value) ? moment(new Date(value), pattern, true) : moment(value, pattern, true);\n    //   if (m.isValid()) {\n    //     const date = m.toDate();\n    //     return date.getFullYear() > 1970 ? date : null;\n    //   }\n    // }\n    return null;\n  }\n\n\n}\n","export const stringIsNumber = (value: string | number): boolean => {\r\n    return !isNaN(+value)\r\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { stringIsNumber } from '../functions/string-is-number';\nimport { DecimalPipe } from '@angular/common';\n\n@Pipe({  name: 'phNumber'})\nexport class PhNumberPipe  extends DecimalPipe implements PipeTransform {\n\n  transform(value: string): string {\n    if (stringIsNumber(value)) { return super.transform(value); }\n    return value || '';\n  }\n}\n\n \n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'timespan'\n})\nexport class TimespanPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return null;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'isArray' })\nexport class IsArrayPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return typeof value === 'object' && Array.isArray(value);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { timeFormats } from 'types';\n\n@Pipe({ name: 'timeSpan' })\nexport class TimeSpanPipe implements PipeTransform {\n\n  transform(value: any, format?: timeFormats): any {\n    const numVal = parseInt(value, 10);\n    if (!numVal && numVal !== 0) { return value; }\n    const seconds = Math.floor((numVal / 1000) % 60);\n    const minutes = Math.floor((numVal / (1000 * 60)) % 60);\n    const hours = Math.floor((numVal / (1000 * 60 * 60)));\n\n    const hoursText = hours < 10 ? '0' + hours : hours;\n    const minutesText = minutes < 10 ? '0' + minutes : minutes;\n    const secondsText = seconds < 10 ? '0' + seconds : seconds;\n\n    if (format === timeFormats.HHmm) { return `${hoursText}:${minutesText}` }\n    else { return `${hoursText}:${minutesText}:${secondsText}` }\n  }\n}\n","export const enumValueToString = (enumType: object, value: number) => {\r\n    value = value || 0;\r\n    if (!enumType[value]) {\r\n        throw new Error(`enum value not exists:\r\n         ${JSON.stringify(enumType)} with value:${value}}`);\r\n    }\r\n    return camelCaseToSplitString(enumType[value]);\r\n}\r\nexport const camelCaseRegex = /([a-z])([A-Z])/g;\r\n\r\nexport const camelCaseToSplitString = (str: string) => {\r\n    if (!str) { return str || ''; }\r\n    return str.toString().replace(camelCaseRegex, '$1 $2');\r\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { enumValueToString } from '../functions/enum-value-to-string';\n\n@Pipe({ name: 'enumToString' })\nexport class EnumToStringPipe implements PipeTransform {\n\n  transform(value: any, ...args: any[]): any {\n    return enumValueToString(args[0], value);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'enumLabelValueList'\n})\nexport class EnumLabelValueListPipe implements PipeTransform {\n\n  transform(enumVals: any, args?: any): any {\n    return null;// enumToSelectItems(enumVals);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'isText'\n})\nexport class IsTextPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return typeof value !== 'object' && !Array.isArray(value);\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'isObject'\n})\nexport class IsObjectPipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n    return typeof value === 'object' && !Array.isArray(value);\n  }\n\n}\n","export const stringIsDate = (value: any): boolean => {\r\n    if (!/[0-9]{1,2}[/.-][0-9]{1,2}[/.-][1-9][0-9]{1,3}/.test(value)\r\n        && !/[1-9][0-9]{1,3}[/.-][0-9]{1,2}[/.-][0-9]{1,2}/.test(value)) {\r\n        return false;\r\n    }\r\n    return !isNaN(Date.parse(value));\r\n}","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\nimport { dateFormats, timeFormats, dateTimeFormats } from 'types';\nimport { stringIsDate } from '../functions/string-is-date';\n\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\n@Pipe({ name: 'myDate' })\nexport class MyDatePipe extends DatePipe implements PipeTransform {\n  regexFormats = [\n    /[0-9]{4}[-/][0-9]{2}[-/][0-9]{2}/,\n    /[0-9]{2}[-/][0-9]{2}[-/][0-9]{4}/\n  ]\n\n  dateIsValidByMoment(value): boolean {\n    return moment(value).isValid();\n  }\n\n  dateByMoment(value, format): string {\n    return moment(value).format(format);\n  }\n\n  transform(value: any, format: dateFormats | dateTimeFormats | timeFormats): any {\n    if (!value) { return value; }\n\n    if (this.dateIsValidByMoment(value)) {\n      return this.dateByMoment(value, format);\n    }\n\n    if (this.regexFormats.some(re => re.test(value))) {\n      return super.transform(value, format);\n    }\n\n    if (stringIsDate(value)) {\n      const result = super.transform(super.transform(value, format), format);\n      if ((value as string).indexOf(result) >= 0) {\n        return result;\n      }\n      return super.transform(value, format);\n    }\n    return value;\n  }\n\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { DatePipe } from '@angular/common';\n//import moment_ from 'moment'\nimport { dateTimeFormats } from 'types';\nimport { stringIsDate } from '../functions/string-is-date';\n\n//const moment = moment_\n@Pipe({ name: 'myDateTime' })\nexport class MyDateTimePipe extends DatePipe implements PipeTransform {\n  regexFormat = [\n    /[0-9]{4}[-/][0-9]{2}[-/][0-9]{2}/,\n    /[0-9]{2}[-/][0-9]{2}[-/][0-9]{4}/\n  ]\n  dateIsValidByMoment(value): boolean {\n    return null;// moment(value).isValid();\n  }\n\n  dateByMoment(value, format): string {\n    return null// moment(value).format(format);\n  }\n  transform(value: any, format: dateTimeFormats): any {\n    if (!value) { return value; }\n\n    if (this.dateIsValidByMoment(value)) { return this.dateByMoment(value, format) }\n\n    if (this.regexFormat.some(reg => reg.test(value))) {\n      return super.transform(value, format);\n    }\n\n    if (stringIsDate(value)) {\n      const result = super.transform(super.transform(value, format), format);\n      if ((value as string).indexOf(result) >= 0) {\n        return result;\n      }\n      return super.transform(value, format);\n    }\n    return value;\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n//import moment_ from 'moment'\nimport { dateTimeFormats, dateFormats, timeFormats } from 'types';\nimport { DatePipe } from '@angular/common';\nimport { stringIsDate } from '../functions/string-is-date';\n// const moment = moment_\n\n@Pipe({ name: 'myTime' })\nexport class MyTimePipe extends DatePipe implements PipeTransform {\n  regexFormat = [\n    /[0-9]{4}[-/][0-9]{2}[-/][0-9]{2}/,\n    /[0-9]{2}[-/][0-9]{2}[-/][0-9]{4}/\n  ]\n  dateIsValidByMoment(value): boolean {\n    return null// moment(value).isValid();\n  }\n\n  dateByMoment(value, format): string {\n    return null;//moment(value).format(format);\n  }\n  transform(value: any, format: dateFormats | dateTimeFormats | timeFormats): any {\n    if (!value) { return value; }\n\n    if (this.dateIsValidByMoment(value)) { return this.dateByMoment(value, format) }\n\n    if (this.regexFormat.some(reg => reg.test(value))) {\n      return super.transform(value, format);\n    }\n\n    if (stringIsDate(value)) {\n      const result = super.transform(super.transform(value, format), format);\n      if ((value as string).indexOf(result) >= 0) {\n        return result;\n      }\n      return super.transform(value, format);\n    }\n    return value;\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { IsDatePipe } from './is-date.pipe';\nimport { PhNumberPipe } from './ph-number.pipe';\nimport { TimespanPipe } from './timespan.pipe';\nimport { IsArrayPipe } from './is-array.pipe';\nimport { TimeSpanPipe } from './time-span.pipe';\nimport { EnumToStringPipe } from './enum-to-string.pipe';\nimport { EnumLabelValueListPipe } from './enum-label-value-list.pipe';\nimport { IsTextPipe } from './is-text.pipe';\nimport { IsObjectPipe } from './is-object.pipe';\nimport { MyDatePipe } from './my-date.pipe';\nimport { MyDateTimePipe } from './my-date-time.pipe';\nimport { MyTimePipe } from './time.pipe';\n\n@NgModule({\n  declarations: [\n    IsDatePipe,\n    PhNumberPipe,\n    MyDatePipe,\n    TimespanPipe,\n    MyDateTimePipe,\n    MyTimePipe,\n    IsArrayPipe,\n    TimeSpanPipe,\n    EnumToStringPipe,\n    EnumLabelValueListPipe,\n    IsTextPipe,\n    IsObjectPipe\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    IsDatePipe,\n    PhNumberPipe,\n    MyDatePipe,\n    TimespanPipe,\n    MyDateTimePipe,\n    MyTimePipe,\n    IsArrayPipe,\n    TimeSpanPipe,\n    EnumToStringPipe,\n    EnumLabelValueListPipe,\n    IsTextPipe,\n    IsObjectPipe\n  ],\n})\nexport class PipesModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\n\n@Injectable()\nexport class WebApiHttpInterceptor implements HttpInterceptor {\n\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\n        const a = req.clone({ url: `${window.location.origin}/${req.url}` })\n        if ((/[^:]\\/\\//.test(req.url))) {\n            req = req.clone({\n                url: req.url.replace(/([^:])\\/\\//g, '$1/')\n            });\n        }\n        if (!/http/.test(req.url) && !/^\\./.test(req.url)) {\n            req = req.clone({\n                url: req.url.replace(/(api\\/)+/gm, 'api/')\n            });\n        }\n        return next.handle(req);\n    }\n}\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const EnvironmentTOKEN = new InjectionToken('environment');","import { camelCaseToSplitString } from './enum-value-to-string';\r\n;\r\n\r\n// export const enumToSelectItems = (enumType: object): SelectItem => {\r\nexport const enumToSelectItems = (enumType: object): any => {\r\n    return Object.entries(enumType).slice(0, Object.keys(enumType).length / 2)\r\n        .map(([key, val]) => ({\r\n            label: camelCaseToSplitString(val),\r\n            value: key\r\n        }))\r\n        .map(item => ({\r\n            ...item,\r\n            value: isNaN(+item.value) ? item.value : +item.value\r\n        })) || [];\r\n}","export const fileNameFromfullPath = (fullPath: string): string => {\r\n    return fullPath && fullPath.replace(/^.*[\\\\\\/]/, '') || '';\r\n}","export const formatNumAsMetricPrefix = (num: number): string => {\r\n    const ranges = [\r\n        { divider: 1e18, suffix: 'P' },\r\n        { divider: 1e15, suffix: 'E' },\r\n        { divider: 1e12, suffix: 'T' },\r\n        { divider: 1e9, suffix: 'G' },\r\n        { divider: 1e6, suffix: 'M' },\r\n        { divider: 1e3, suffix: 'K' },\r\n    ];\r\n    for (let i = 0; i < ranges.length; i++) {\r\n        if (num >= ranges[i].divider) {\r\n            return _formatNumString(num / ranges[i].divider) + ranges[i].suffix;\r\n        }\r\n    }\r\n\r\n    return _formatNumString(num);\r\n}\r\n\r\nexport const _formatNumString = (num: number): string => {\r\n    return (Number(num.toFixed(2)) / 1).toString(); // 1 to remove trailing zeros\r\n}","export const jsonIsEmpty = (json: any): boolean => {\r\n    try {\r\n        const obj = JSON.parse(json);\r\n        return !(!!Object.keys(obj).length);\r\n    }\r\n    catch{\r\n\r\n    }\r\n    return false;\r\n}","export const sortDateTime = (date1: string, date2: string) => {\r\n    return Date.parse(date1) - Date.parse(date2);\r\n}","export const stringIsJson = (json: any): boolean => {\r\n    try {\r\n        const obj = JSON.parse(json);\r\n        return !!obj && typeof (obj) === 'object';\r\n    }\r\n    catch{\r\n\r\n    }\r\n    return false\r\n}","import { Statement } from '@angular/compiler';\r\n\r\nexport const toPascalCaseRec = (obj) => {\r\n    if (Array.isArray(obj)) {\r\n        return obj.map(val => toPascalCaseRec(val))\r\n    }\r\n    return Object.entries(obj).reduce((state, [key, val]) => ({\r\n        ...state,\r\n        [toPascalCase(key)]: typeof (val) === 'object' ?\r\n            toPascalCaseRec(val)\r\n            : val\r\n    }))\r\n}\r\n\r\nexport const toPascalCase = (str: string) => {\r\n    if (typeof (str) !== 'string') { return str; }\r\n    return str.split('').map((ch, idx) => idx === 0 ? ch.toUpperCase() : ch).join();\r\n}","export const tryParseJson = (json: string) => {\r\n    try {\r\n        return JSON.parse(json)\r\n    }\r\n    catch {\r\n        return null;\r\n    }\r\n} ","/*\n * Public API Surface of core\n */\n\nexport * from './lib/core.service';\nexport * from './lib/core.component';\nexport * from './lib/core.module';\nexport * from './lib/pipes/pipes.module';\n\n\nexport * from './lib/token/interceptors/web-api-http.interceptor';\nexport * from './lib/token/environment-token';\n\n\nexport * from './lib/functions/enum-to-select-items'\nexport * from './lib/functions/enum-value-to-string'\nexport * from './lib/functions/file-name-from-full-path'\nexport * from './lib/functions/format-num-as-metric-prefix'\nexport * from './lib/functions/json-is-empty'\nexport * from './lib/functions/sort-date-time'\nexport * from './lib/functions/string-is-date'\nexport * from './lib/functions/string-is-json'\nexport * from './lib/functions/string-is-number'\nexport * from './lib/functions/to-pascal-case-record'\nexport * from './lib/functions/try-parse-json'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {EnumLabelValueListPipe as ɵj} from './lib/pipes/enum-label-value-list.pipe';\nexport {EnumToStringPipe as ɵi} from './lib/pipes/enum-to-string.pipe';\nexport {IsArrayPipe as ɵg} from './lib/pipes/is-array.pipe';\nexport {IsDatePipe as ɵa} from './lib/pipes/is-date.pipe';\nexport {IsObjectPipe as ɵl} from './lib/pipes/is-object.pipe';\nexport {IsTextPipe as ɵk} from './lib/pipes/is-text.pipe';\nexport {MyDateTimePipe as ɵe} from './lib/pipes/my-date-time.pipe';\nexport {MyDatePipe as ɵc} from './lib/pipes/my-date.pipe';\nexport {PhNumberPipe as ɵb} from './lib/pipes/ph-number.pipe';\nexport {TimeSpanPipe as ɵh} from './lib/pipes/time-span.pipe';\nexport {MyTimePipe as ɵf} from './lib/pipes/time.pipe';\nexport {TimespanPipe as ɵd} from './lib/pipes/timespan.pipe';"],"names":["mom","moment","moment_"],"mappings":"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"}